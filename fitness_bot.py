from aiogram.types import Message, ReplyKeyboardRemove
import logging.handlers
import logging
import os
import aiogram
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
import dotenv
import keyboards
from yoomoney import Client
import asyncio
from datetime import datetime, timedelta
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler


class BlackListMiddleware(BaseMiddleware):
    """
    Middleware, –∑–∞–ø—Ä–µ—â–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏. """

    def __init__(self):
        super(BlackListMiddleware, self).__init__()

    async def on_process_message(self, msg: Message, data: dict):
        """
        –≠—Ç–æ—Ç Handler –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """

        if msg.from_user.id in black_list:
            await msg.answer("–¢—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –ø–æ–∫—É–ø–∞–ª —Ñ–∏—Ç–Ω–µ—Å –ø—Ä–æ–≥—Ä–∞–º–º—É! ‚ùå \n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            raise CancelHandler()


dotenv.load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª .env


token = os.environ["YOOMONEY_TOKEN"]
client = Client(token)


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)

# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0),
    logging.StreamHandler()])
    

# –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä:
Bot = aiogram.Bot(os.environ["TOKEN"])
DP = aiogram.Dispatcher(Bot, storage=MemoryStorage())
DP.setup_middleware(BlackListMiddleware())
USERS_BGTASKS = {}
prices = {"–ì—Ä—É–¥—å": 2, "–ù–æ–≥–∏": 2, "–ü—Ä–µ—Å—Å": 2, "–†—É–∫–∏": 2, "–°–ø–∏–Ω–∞ + –ø–ª–µ—á–∏": 2, "–§—É–ª–±–∞–¥–∏": 2}
black_list = []


class UserState(StatesGroup):  # –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    intensivity = State()


async def check_operation(user_id, state, message_id):

    data = await state.get_data()

    while True:  # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª
        history = client.operation_history(label=str(user_id))
        if history.operations:
            print("Operation:",history.operations[0].operation_id)
            print("\tStatus     -->", history.operations[0].status)
            print("\tDatetime   -->", history.operations[0].datetime + timedelta(seconds=30) + timedelta(hours=3), datetime.now())
            if history.operations[0].status == "success" and history.operations[0].datetime + timedelta(seconds=180) + timedelta(hours=3) > datetime.now():
                await Bot.send_message(user_id, f'–¢—ã –∫—É–ø–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º—É "{data["program"]}" —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {data["intensivity"]} \
                \n–¢—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç ‚ùóÔ∏è', reply_markup=ReplyKeyboardRemove())
                #await Bot.send_message(4356565, f'–ö—É–ø–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ "{data["program"]}" —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é "{data["intensivity"]}" —É –±–æ—Ç–∞ @SILAMUJIKOV.')
                await Bot.delete_message(user_id, message_id)
                black_list.append(user_id)
                await asyncio.sleep(90)
                black_list.remove(user_id)
                await state.finish()
                USERS_BGTASKS[user_id].cancel()
                del USERS_BGTASKS[user_id]

        await asyncio.sleep(10)


@DP.message_handler(commands=["start"])      # –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /start
async def start(msg: Message):

    await msg.answer("–ü—Ä–∏–≤–µ—Ç üëã. –Ø Telegram Bot —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –¥–æ–º—É. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ", reply_markup=keyboards.choose_intensity)
    await UserState.intensivity.set()


@DP.message_handler(state=UserState.intensivity)
async def ReplyKeyboard_handling(msg: Message, state: FSMContext):

    if msg.text in ['–õ—ë–≥–∫–∞—è üü¢', '–°—Ä–µ–¥–Ω—è—è üü†', '–°–ª–æ–∂–Ω–∞—è üî¥']:
        await state.update_data(intensivity=msg.text[:-2])
        await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É: ", reply_markup=keyboards.choose_program)
        await state.reset_state(False)
    else:
        await state.finish()


@DP.message_handler()
async def program_handling(msg: Message, state: FSMContext):

    if msg.from_user.id in USERS_BGTASKS:
        USERS_BGTASKS[msg.from_user.id].cancel()
        del USERS_BGTASKS[msg.from_user.id]

    await state.update_data(program=msg.text[:-2])
    data = await state.get_data()
    message = await Bot.send_photo(chat_id=msg.from_user.id, photo=open("{}.jpg".format(msg.text[:-2]), "rb"), 
    caption=f'–î–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É "{msg.text[:-2]}" —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é "{data["intensivity"]}".', reply_markup=keyboards.generate_yoomoney_menu(msg.from_user.id, prices[msg.text[:-2]]))
    USERS_BGTASKS[msg.from_user.id] = asyncio.create_task(check_operation(msg.from_user.id, state, message.message_id)) # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É  
        

if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")  # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=DP,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ